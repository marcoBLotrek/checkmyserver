"""
Django settings for mychecker project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=9pkcc95_3@*jy5k29vra-9$79ingc%tqj-48)4c(4n1)nr%4c'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['example.org']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'panel',
    'huey.contrib.djhuey',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mychecker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mychecker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'test_db',
        'USER': 'postgres',
        'PASSWORD': 'a',
        'HOST': 'db',
        'PORT': '5432',
    }
}
# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/


# All settings common to all environments
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

HUEY = {
   'name': 'jointlytaskrunner',  # The huey name.
   'result_store': True,  # Store return values of tasks.
   'events': True,  # Consumer emits events allowing real-time monitoring.
   'store_none': False,  # If a task returns None, do not save to results.
   'always_eager': False,  # If DEBUG=True, run synchronously.
   'store_errors': True,  # Store error info if task throws exception.
   'blocking': False,  # Poll the queue rather than do blocking pop.
   'connection': {
       'host': 'redis',
       'port': 6379,
       'db': 0,
       'connection_pool': None,  # Definitely you should use pooling!
       # ... tons of other options, see redis-py for details.

       # huey-specific connection parameters.
       'read_timeout': 1,  # If not polling (blocking pop), use timeout.
       'max_errors': 1000,  # Only store the 1000 most recent errors.
       'url': None,  # Allow Redis config via a DSN.
   },
   'consumer': {
       'workers': 2,
       'worker_type': 'thread',
       'initial_delay': 0.1,  # Smallest polling interval, same as -d.
       'backoff': 1.15,  # Exponential backoff using this rate, -b.
       'max_delay': 10.0,  # Max possible polling interval, -m.
       'utc': True,  # Treat ETAs and schedules as UTC datetimes.
       'scheduler_interval': 1,  # Check schedule every second, -s.
       'periodic': True,  # Enable crontab feature.
       'check_worker_health': True,  # Enable worker health checks.
       'health_check_interval': 1,  # Check worker health every second.
   },
}